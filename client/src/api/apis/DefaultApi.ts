/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  CreateSurvivorRequest,
  HTTPValidationError,
  InventoryItem,
  Survivor,
  SurvivorListReply,
  TradeRequest,
} from "../models/index";
import {
  CreateSurvivorRequestFromJSON,
  CreateSurvivorRequestToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  InventoryItemFromJSON,
  InventoryItemToJSON,
  SurvivorFromJSON,
  SurvivorToJSON,
  SurvivorListReplyFromJSON,
  SurvivorListReplyToJSON,
  TradeRequestFromJSON,
  TradeRequestToJSON,
} from "../models/index";

export interface CreateSurvivorSurvivorsPostRequest {
  createSurvivorRequest: CreateSurvivorRequest;
}

export interface GetSurvivorInventoryInventoryGetRequest {
  suvivorId: number;
}

export interface ReportSurvivorSurvivorsReportPutRequest {
  reportingSurvivorId: number;
  reportedSurvivorId: number;
}

export interface TradeInventoryTradePostRequest {
  tradeRequest: TradeRequest;
}

export interface UpdateSurvivorSurvivorsPutRequest {
  id: number;
  longitude: number;
  latitude: number;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Create Survivor
   */
  async createSurvivorSurvivorsPostRaw(
    requestParameters: CreateSurvivorSurvivorsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["createSurvivorRequest"] == null) {
      throw new runtime.RequiredError(
        "createSurvivorRequest",
        'Required parameter "createSurvivorRequest" was null or undefined when calling createSurvivorSurvivorsPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/survivors/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: CreateSurvivorRequestToJSON(
          requestParameters["createSurvivorRequest"],
        ),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Create Survivor
   */
  async createSurvivorSurvivorsPost(
    requestParameters: CreateSurvivorSurvivorsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.createSurvivorSurvivorsPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Retrieves the inventory of a specific survivor.  Args:     suvivor_id (int): The ID of the survivor whose inventory is being requested.  Returns:     List[InventoryItem]: A list of inventory items belonging to the specified survivor.
   * Get Survivor Inventory
   */
  async getSurvivorInventoryInventoryGetRaw(
    requestParameters: GetSurvivorInventoryInventoryGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<InventoryItem>>> {
    if (requestParameters["suvivorId"] == null) {
      throw new runtime.RequiredError(
        "suvivorId",
        'Required parameter "suvivorId" was null or undefined when calling getSurvivorInventoryInventoryGet().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["suvivorId"] != null) {
      queryParameters["suvivor_id"] = requestParameters["suvivorId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/inventory/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(InventoryItemFromJSON),
    );
  }

  /**
   * Retrieves the inventory of a specific survivor.  Args:     suvivor_id (int): The ID of the survivor whose inventory is being requested.  Returns:     List[InventoryItem]: A list of inventory items belonging to the specified survivor.
   * Get Survivor Inventory
   */
  async getSurvivorInventoryInventoryGet(
    requestParameters: GetSurvivorInventoryInventoryGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<InventoryItem>> {
    const response = await this.getSurvivorInventoryInventoryGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Survivors
   */
  async getSurvivorsSurvivorsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<SurvivorListReply>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/survivors/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SurvivorListReplyFromJSON(jsonValue),
    );
  }

  /**
   * Get Survivors
   */
  async getSurvivorsSurvivorsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<SurvivorListReply> {
    const response = await this.getSurvivorsSurvivorsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Report Survivor
   */
  async reportSurvivorSurvivorsReportPutRaw(
    requestParameters: ReportSurvivorSurvivorsReportPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<boolean>> {
    if (requestParameters["reportingSurvivorId"] == null) {
      throw new runtime.RequiredError(
        "reportingSurvivorId",
        'Required parameter "reportingSurvivorId" was null or undefined when calling reportSurvivorSurvivorsReportPut().',
      );
    }

    if (requestParameters["reportedSurvivorId"] == null) {
      throw new runtime.RequiredError(
        "reportedSurvivorId",
        'Required parameter "reportedSurvivorId" was null or undefined when calling reportSurvivorSurvivorsReportPut().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["reportingSurvivorId"] != null) {
      queryParameters["reporting_survivor_id"] =
        requestParameters["reportingSurvivorId"];
    }

    if (requestParameters["reportedSurvivorId"] != null) {
      queryParameters["reported_survivor_id"] =
        requestParameters["reportedSurvivorId"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/survivors/report`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<boolean>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Report Survivor
   */
  async reportSurvivorSurvivorsReportPut(
    requestParameters: ReportSurvivorSurvivorsReportPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<boolean> {
    const response = await this.reportSurvivorSurvivorsReportPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Handles the trading of inventory items between two survivors.  Args:     trade_request (TradeRequest): The trade request containing sender ID, receiver ID,                                   and the item deltas.  Raises:     Exception: If the trade is imbalanced or if a survivor has insufficient items.  Returns:     None
   * Trade
   */
  async tradeInventoryTradePostRaw(
    requestParameters: TradeInventoryTradePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters["tradeRequest"] == null) {
      throw new runtime.RequiredError(
        "tradeRequest",
        'Required parameter "tradeRequest" was null or undefined when calling tradeInventoryTradePost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/inventory/trade`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: TradeRequestToJSON(requestParameters["tradeRequest"]),
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Handles the trading of inventory items between two survivors.  Args:     trade_request (TradeRequest): The trade request containing sender ID, receiver ID,                                   and the item deltas.  Raises:     Exception: If the trade is imbalanced or if a survivor has insufficient items.  Returns:     None
   * Trade
   */
  async tradeInventoryTradePost(
    requestParameters: TradeInventoryTradePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.tradeInventoryTradePostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update Survivor
   */
  async updateSurvivorSurvivorsPutRaw(
    requestParameters: UpdateSurvivorSurvivorsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Survivor>> {
    if (requestParameters["id"] == null) {
      throw new runtime.RequiredError(
        "id",
        'Required parameter "id" was null or undefined when calling updateSurvivorSurvivorsPut().',
      );
    }

    if (requestParameters["longitude"] == null) {
      throw new runtime.RequiredError(
        "longitude",
        'Required parameter "longitude" was null or undefined when calling updateSurvivorSurvivorsPut().',
      );
    }

    if (requestParameters["latitude"] == null) {
      throw new runtime.RequiredError(
        "latitude",
        'Required parameter "latitude" was null or undefined when calling updateSurvivorSurvivorsPut().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["id"] != null) {
      queryParameters["id"] = requestParameters["id"];
    }

    if (requestParameters["longitude"] != null) {
      queryParameters["longitude"] = requestParameters["longitude"];
    }

    if (requestParameters["latitude"] != null) {
      queryParameters["latitude"] = requestParameters["latitude"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/survivors/`,
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      SurvivorFromJSON(jsonValue),
    );
  }

  /**
   * Update Survivor
   */
  async updateSurvivorSurvivorsPut(
    requestParameters: UpdateSurvivorSurvivorsPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Survivor> {
    const response = await this.updateSurvivorSurvivorsPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
